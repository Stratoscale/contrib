---
- name: Set selinux permissive because tokens and selinux don't work together
  selinux: state=permissive policy={{ ansible_selinux.type }}
  when: ansible_selinux is defined and ansible_selinux.status == "enabled"

- include: packageManagerInstall.yml
  when: source_type == "packageManager"
  tags:
    - binary-update

- name: Make sure manifest directory exists
  file: path={{ kube_manifest_dir }} state=directory

- name: Get the node token values
  slurp:
    src: "{{ kube_token_dir }}/{{ item }}-{{ inventory_hostname }}.token"
  with_items:
    - "system:kubelet"
    - "system:proxy"
  register: tokens
  delegate_to: "{{ groups['masters'][0] }}"

- name: Set token facts
  set_fact:
    kubelet_token: "{{ tokens.results[0].content|b64decode }}"
    proxy_token: "{{ tokens.results[1].content|b64decode }}"

- name: Create the kubelet working directory
  file: path={{ kubelet_working_dir }} state=directory

- name: write the config files for kubelet
  template: src=kubelet.j2 dest={{ kube_config_dir }}/kubelet
  notify:
    - restart kubelet

- name: write the kubecfg (auth) file for kubelet
  template: src=kubelet.kubeconfig.j2 dest={{ kube_config_dir }}/kubelet.kubeconfig
  notify:
    - restart kubelet

- name: Enable kubelet
  service: name=kubelet enabled=yes state=started
  notify:
    - restart kubelet

- name: write the config files for proxy
  template: src=proxy.j2 dest={{ kube_config_dir }}/proxy
  notify:
    - restart proxy

- name: write the kubecfg (auth) file for kube-proxy
  template: src=proxy.kubeconfig.j2 dest={{ kube_config_dir }}/proxy.kubeconfig
  notify:
    - restart proxy

- name: Enable proxy
  service: name=kube-proxy enabled=yes state=started
  when: networking != "opencontrail"

- name: write the delay-node-services target
  copy: src=delay-node-services.target dest=/etc/systemd/system/ mode=0644
  when: not ansible_distribution == 'Ubuntu' and not ansible_distribution_major_version|int < 15

- name: Enable delay-node-services
  service: name=delay-node-services.target enabled=yes
  when: not ansible_distribution == 'Ubuntu' and not ansible_distribution_major_version|int < 15
